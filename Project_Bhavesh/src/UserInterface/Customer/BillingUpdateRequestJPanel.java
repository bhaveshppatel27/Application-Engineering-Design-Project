/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Customer;

import Business.Customer.Customer;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Enterprise.FinanceEnterprise;
import Business.Network.Network;
import Business.Organization.AccountsOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BillUpdateRequest;
import Business.WorkQueue.ComplaintRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bhavesh Patel
 */
public class BillingUpdateRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    private Customer customer;
    private JPanel container;
    private Network network;
    private UserAccount userAccount;
    public BillingUpdateRequestJPanel(JPanel container, Customer customer,Network network) {
        initComponents();
        this.network = network;
        this.container = container;
        this.customer = customer;
        
        userAccount = customer.getUserAccount();
        populateRequestTable();
    }

    public void populateRequestTable(){
        
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest request1 : userAccount.getWorkQueue().getWorkRequestList()){
            if(request1 instanceof BillUpdateRequest){
               BillUpdateRequest request = (BillUpdateRequest) request1;
            Object[] row = new Object[4];
            row[0] = "Send Updated Bill";
            row[1] = request.getBillRequestreceiver().getEmployee();
            row[2] = request;
            row[3] = request.getUpdateResult() == null ? "Waiting" : request.getUpdateResult();
            
            model.addRow(row); 
            }
            
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        button.setText("Request Updated Bill");
        button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Request for Updated Bill");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(444, 444, 444)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(backJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 242, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(232, 232, 232))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 330, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void createRequest(){
        
        Organization org = null;
        
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            if(enterprise instanceof FinanceEnterprise){
                for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof AccountsOrganization){
                        org = organization;
                        break;
                    }
                }
            }
        }
        
        
        int i1 = 0;
        int count = org.getUserAccountDirectory().getUserAccountList().size();
        
        if(count == 0){
            JOptionPane.showMessageDialog(null, "No staff available at this moment");
            return;
        }else if(count == 1){
            i1 = 1;
        }else{
            Random r = new Random();
            i1 = r.nextInt(count - 1) + 1;
        }
        
        if (org!=null){
            BillUpdateRequest request = new BillUpdateRequest();
            UserAccount ua = org.getUserAccountDirectory().getUserAccountList().get(i1-1);
            request.setSender(userAccount);
            request.setStatus("Assigned");
            request.setBillRequestreceiver(ua);
            ua.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        populateRequestTable();
        
    }
    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        
        int a = customer.getWaterUsageHistory().size();
        if(a>0){
            if(customer.getBillingDate()!=null){
                if(customer.getWaterUsageHistory().get(a-1).getDate().compareTo(customer.getBillingDate()) > 0){
                    createRequest();
                }else{
                    JOptionPane.showMessageDialog(null, "Bill is already Updated");
                    return;
                }
            }else{
                createRequest();
            }
        }else{
            JOptionPane.showMessageDialog(null, "No Water Usage Yet");
        }
        
        
        
    }//GEN-LAST:event_buttonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
