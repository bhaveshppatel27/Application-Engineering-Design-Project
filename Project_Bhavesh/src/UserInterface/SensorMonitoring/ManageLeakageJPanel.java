/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SensorMonitoring;

import Business.Customer.Customer;
import Business.Employee.Employee;
import Business.WaterSupplyAdmin.SensorValue;
import Business.Enterprise.Enterprise;
import Business.Enterprise.RepairEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.RepairManagerOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.RepairRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Bhavesh Patel
 */
public class ManageLeakageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageLeakageJPanel
     */
    
    private JPanel container;
    private Organization organization;
    private UserAccount userAccount;
    private Network network;
    private Enterprise enterprise;
    public ManageLeakageJPanel(JPanel container,UserAccount userAccount,Organization organization,Network n,Enterprise enterprise) {
        initComponents();
        this.enterprise = enterprise;
        this.container = container;
        this.organization = organization;
        this.userAccount = userAccount;
        this.network = n;
        
        populateLeakageTable();
        populateRequestTable();
        workRequestJTable.setAutoCreateRowSorter(true);
        leakageTable.setAutoCreateRowSorter(true);
        
    }

    private void populateLeakageTable(){
        
        DefaultTableModel model = (DefaultTableModel) leakageTable.getModel();
        model.setRowCount(0);
        for(Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            Customer customer = (Customer) employee;
            int a = customer.getTargetSensor().getSensorValueList().size();
            if(a <=0){
                continue;
            }
            SensorValue sensorValue = customer.getTargetSensor().getSensorValueList().get(a-1);
            if(sensorValue.getFlowrate() < customer.getSourceSensor().getSensorValue().getFlowrate())
            {
            Object[] row = new Object[3];
            row[0] = customer;
            row[1] = customer.getSourceSensor().getSensorValue().getFlowrate();
            row[2] = sensorValue.getFlowrate();
            model.addRow(row);
        
            }
        }
        
    }
    
    private void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[8];
            RepairRequest request1 = (RepairRequest) request;
            
            row[0] = request1.getCustomer();
            row[1] = request.getReceiver() == null? "Yet to assign" :request.getReceiver();
            row[2] = request1;
            row[3] = request1.getRepairResult() == null ? "Waiting" : request1.getRepairResult();
            row[4] = request.getRequestDate();
            row[5] = request.getResolveDate() == null? "Not yet resolved":request.getResolveDate() ;
            row[6] = request1.getTimeForRepair() == 0.0? "Not Yet Repaired" : request1.getTimeForRepair() + " Seconds";
            row[7] = request1.getLeakageVolume() == 0.0? "Not Yet Repaired" : request1.getLeakageVolume() + " Gallons";

            
            model.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        leakageTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        leakageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer", "Source Flow Rate", "Target Flow Rate"
            }
        ));
        jScrollPane1.setViewportView(leakageTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Leakages");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer", "Receiver", "Status", "Result", "Date Requested", "Date Resolved", "Repair Time", "Leakage Volume"
            }
        ));
        jScrollPane2.setViewportView(workRequestJTable);

        jButton1.setText("Request Repair");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Repair Requests");

        jButton2.setText("<<Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Manage Leakages");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 929, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(424, 424, 424)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(247, 247, 247)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(289, 289, 289)
                                .addComponent(jLabel1)))))
                .addContainerGap(355, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addGap(98, 98, 98)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(92, 92, 92)
                .addComponent(jLabel2)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        
        
        int selectedRow = leakageTable.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a leakage for repair");
            return;
        }
        Customer customer = (Customer)leakageTable.getValueAt(selectedRow, 0);
        for(WorkRequest workRequest : enterprise.getWorkQueue().getWorkRequestList()){
            RepairRequest repairRequest =(RepairRequest) workRequest;
            if(repairRequest.getCustomer().equals(customer) && !(repairRequest.getStatus().equalsIgnoreCase("Complete"))){
                JOptionPane.showMessageDialog(null, "Request already sent for repair");
                return;
            }
        }
        
        RepairRequest repairRequest = new RepairRequest();
        
        repairRequest.setCustomer(customer);
        repairRequest.setStatus("Sent");
        repairRequest.setRequestDate(new Date());
        repairRequest.setSender(userAccount);
        
        
        Organization org = null;
        
        for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            if (enterprise instanceof RepairEnterprise){
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if (organization instanceof RepairManagerOrganization){
                        org = organization;
                        break;
            }
        }
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(repairRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(repairRequest);
            enterprise.getWorkQueue().getWorkRequestList().add(repairRequest);
        }else{
            JOptionPane.showMessageDialog(null, "RepairOrganization not yet created");
            return;
        }
       populateRequestTable();
       JOptionPane.showMessageDialog(null, "Sent for repair");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable leakageTable;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
